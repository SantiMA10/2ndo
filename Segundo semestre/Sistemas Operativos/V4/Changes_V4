
// Paste in Processor.c
// Function to raise an exception
void Processor_RaiseException(int typeOfException) {
  
	Processor_RaiseInterrupt(EXCEPTION_BIT);
	registerB_CPU=typeOfException;
}

// Paste in OperatingSystem.c
// Function to initialize the partition table
void OperatingSystem_InitializePartitionTable() {

	char lineRead[MAXLINELENGTH];
	FILE *fileMemConfig;
	
	fileMemConfig= fopen(MEMCONFIG, "r");
	int number = 0;
	// The initial physical address of the first partition is 0
	int initAddress=0;
	int currentPartition=0;
	
	// The file is processed line by line
	while (fgets(lineRead, MAXLINELENGTH, fileMemConfig) != NULL) {
		number=atoi(lineRead);
		// "number" is the size of a just read partition
		partitionsTable[currentPartition].initAddress=initAddress;
		partitionsTable[currentPartition].size=number;
		partitionsTable[currentPartition].occupied=0;
		// Next partition will begin at the updated "initAdress"
		initAddress+=number;
		// There is now one more partition
		currentPartition++;
	}
}

